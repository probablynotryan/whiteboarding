Q1: URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.

const replaceSpaces = (str) => {
  let o = "";
  for (let i = 0; i < str.length; i++)
    o = o.concat((str[i] === " ") ? "%20" : str[i])
  return o;
}


Q2: Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

const dedupeArr = (arr) => {
  let o = [];
  for (let i = 0; i < arr.length; i++){
    (!o.includes(arr[i])) && o.push(arr[i])
  }
  return o;
}

const filterArr = (arr) => arr.filter((element, index, array) => !array.splice(0,index).includes(element));



Q3: Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

const compressStr = (str) => {
  let o = "";
  while (str.length != 0) {
    if (!o.includes(str[0])){
    o = o.concat(str.split(str[0]).length - 1) + str[0];
    }
    str = str.substring(1);
  }
  return o;
}
    